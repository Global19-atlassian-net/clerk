// Copyright 2016 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <gtest/gtest.h>

#include "headers.h"
#include "stringpiece.h"
#include "util.h"

namespace clerk {

class HeadersTest : public ::testing::Test {};

const char ip6tcp[] = {
    0x24, 0xbe, 0x05, 0x27, 0x0b, 0x17, 0x44, 0xf4, 0x77, 0x95, 0xd0,
    0xc1, 0x86, 0xdd, 0x66, 0x00, 0x00, 0x00, 0x00, 0x20, 0x06, 0x3c,
    0x26, 0x07, 0xf8, 0xb0, 0x40, 0x0f, 0x08, 0x02, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x20, 0x05, 0x26, 0x20, 0x00, 0x00, 0x10, 0x05,
    0x00, 0x12, 0xb5, 0x62, 0x47, 0xd0, 0x45, 0xdd, 0x9f, 0xf6, 0x01,
    0xbb, 0xb5, 0xea, 0x97, 0xb3, 0xf0, 0xde, 0xed, 0xc2, 0xf5, 0x9e,
    0x80, 0x10, 0x00, 0xec, 0x35, 0x11, 0x00, 0x00, 0x01, 0x01, 0x08,
    0x0a, 0x19, 0xab, 0x61, 0x81, 0x23, 0x11, 0xde, 0xdc,
};

const char ip4udp[] = {
    0x00, 0x00, 0x5e, 0x00, 0x01, 0xca, 0x24, 0xbe, 0x05, 0x27, 0x0b, 0x17,
    0x08, 0x00, 0x45, 0x00, 0x00, 0x41, 0x92, 0xa0, 0x40, 0x00, 0x40, 0x11,
    0xce, 0x4b, 0x64, 0x64, 0xca, 0x49, 0xac, 0x10, 0xff, 0x01, 0x10, 0x12,
    0x00, 0x35, 0x00, 0x2d, 0xd9, 0xfe, 0x14, 0x1a, 0x01, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x78, 0x6b, 0x63, 0x64, 0x03,
    0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x29, 0x10,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

#define POINTERS_EQUAL(a, b) \
  EXPECT_EQ(reinterpret_cast<uintptr_t>(a), reinterpret_cast<uintptr_t>(b))

TEST_F(HeadersTest, TestEquality) {
  Headers h;
  h.Parse(StringPiece(ip6tcp, sizeof(ip6tcp)));
  POINTERS_EQUAL(h.eth, ip6tcp + 0);
  POINTERS_EQUAL(h.ip4, nullptr);
  POINTERS_EQUAL(h.ip6, ip6tcp + 14);
  POINTERS_EQUAL(h.tcp, ip6tcp + 54);
  POINTERS_EQUAL(h.udp, nullptr);
  POINTERS_EQUAL(h.icmp4, nullptr);
  POINTERS_EQUAL(h.icmp6, nullptr);
  POINTERS_EQUAL(h.ip6frag, nullptr);
  h.Parse(StringPiece(ip4udp, sizeof(ip4udp)));
  POINTERS_EQUAL(h.eth, ip4udp + 0);
  POINTERS_EQUAL(h.ip4, ip4udp + 14);
  POINTERS_EQUAL(h.ip6, nullptr);
  POINTERS_EQUAL(h.tcp, nullptr);
  POINTERS_EQUAL(h.udp, ip4udp + 34);
  POINTERS_EQUAL(h.icmp4, nullptr);
  POINTERS_EQUAL(h.icmp6, nullptr);
  POINTERS_EQUAL(h.ip6frag, nullptr);
  h.Reset();
  POINTERS_EQUAL(h.eth, nullptr);
  POINTERS_EQUAL(h.ip4, nullptr);
  POINTERS_EQUAL(h.ip6, nullptr);
  POINTERS_EQUAL(h.tcp, nullptr);
  POINTERS_EQUAL(h.udp, nullptr);
  POINTERS_EQUAL(h.icmp4, nullptr);
  POINTERS_EQUAL(h.icmp6, nullptr);
  POINTERS_EQUAL(h.ip6frag, nullptr);
}

TEST_F(HeadersTest, ICMP4) {
  const char ip4icmp[] = {
      0x24, 0xbe, 0x05, 0x27, 0x0b, 0x17, 0x44, 0xf4, 0x77, 0x95, 0xd0,
      0xc1, 0x08, 0x00, 0x45, 0x80, 0x00, 0x54, 0x00, 0x00, 0x00, 0x00,
      0x34, 0x01, 0x47, 0x6c, 0x08, 0x08, 0x08, 0x08, 0x64, 0x64, 0xca,
      0x49, 0x00, 0x00, 0x1e, 0x71, 0x30, 0x40, 0x00, 0x02, 0x37, 0x66,
      0x32, 0x57, 0x00, 0x00, 0x00, 0x00, 0x85, 0xbc, 0x03, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
      0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22,
      0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d,
      0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
  };
  Headers h;
  h.Parse(StringPiece(ip4icmp, sizeof(ip4icmp)));
  POINTERS_EQUAL(h.eth, ip4icmp + 0);
  POINTERS_EQUAL(h.ip4, ip4icmp + 14);
  POINTERS_EQUAL(h.ip6, nullptr);
  POINTERS_EQUAL(h.tcp, nullptr);
  POINTERS_EQUAL(h.udp, nullptr);
  POINTERS_EQUAL(h.icmp4, ip4icmp + 34);
  POINTERS_EQUAL(h.icmp6, nullptr);
  POINTERS_EQUAL(h.ip6frag, nullptr);
}

TEST_F(HeadersTest, ICMP6) {
  const char ip6icmp[] = {
      0x00, 0x00, 0x86, 0x05, 0x80, 0xda, 0x00, 0x60, 0x97, 0x07, 0x69, 0xea,
      0x86, 0xdd, 0x60, 0x00, 0x00, 0x00, 0x00, 0x44, 0x3a, 0x40, 0x3f, 0xfe,
      0x05, 0x07, 0x00, 0x00, 0x00, 0x01, 0x02, 0x60, 0x97, 0xff, 0xfe, 0x07,
      0x69, 0xea, 0x3f, 0xfe, 0x05, 0x07, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00,
      0x86, 0xff, 0xfe, 0x05, 0x80, 0xda, 0x03, 0x00, 0xf7, 0x52, 0x00, 0x00,
      0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x14, 0x11, 0x01, 0x3f, 0xfe,
      0x05, 0x07, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x86, 0xff, 0xfe, 0x05,
      0x80, 0xda, 0x3f, 0xfe, 0x05, 0x01, 0x04, 0x10, 0x00, 0x00, 0x02, 0xc0,
      0xdf, 0xff, 0xfe, 0x47, 0x03, 0x3e, 0xa0, 0x75, 0x82, 0x9c, 0x00, 0x14,
      0xec, 0x4b, 0x02, 0x01, 0x00, 0x00, 0xf9, 0xc8, 0xe7, 0x36, 0x8a, 0x2c,
      0x09, 0x00,
  };
  Headers h;
  h.Parse(StringPiece(ip6icmp, sizeof(ip6icmp)));
  POINTERS_EQUAL(h.eth, ip6icmp + 0);
  POINTERS_EQUAL(h.ip4, nullptr);
  POINTERS_EQUAL(h.ip6, ip6icmp + 14);
  POINTERS_EQUAL(h.tcp, nullptr);
  POINTERS_EQUAL(h.udp, nullptr);
  POINTERS_EQUAL(h.icmp4, nullptr);
  POINTERS_EQUAL(h.icmp6, ip6icmp + 54);
  POINTERS_EQUAL(h.ip6frag, nullptr);
}

}  // namespace clerk
